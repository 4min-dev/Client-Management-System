generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum CurrencyType {
  AMD
  RUB
  USD
  EUR
  GEL
}

enum StationStatus {
  Active
  NotActive
}

model User {
  id       String @id @default(uuid())
  login    String @unique
  password String

  twoFASecret  String?
  twoFAEnabled Boolean @default(true)

  @@map("users")
}

model Company {
  id          String @id @default(uuid())
  name        String
  description String

  isDeleted         Boolean   @default(false)
  prepayment        Float     @default(0)

  ownerContact   Contact @relation("OwnerContact", fields: [ownerContactId], references: [id])
  ownerContactId String

  responsibleContact   Contact? @relation("ResponsibleContact", fields: [responsibleContactId], references: [id])
  responsibleContactId String?

  stations Station[]

  @@map("companies")
}

model Station {
  id String @id @default(uuid())

  contact Contact? @relation(fields: [contactId], references: [id])

  country String
  city    String
  address String

  procCount   Int
  pistolCount Int

  currencyType  CurrencyType
  currencyValue Float        @default(0)

  synchronize DateTime?

  prepayment Float @default(0)

  status    StationStatus
  paidUntil DateTime?

  discount Float

  contactId  String?
  macAddress String?

  cryptoKey   StationCryptoKey? @relation(fields: [cryptoKeyId], references: [id])
  cryptoKeyId String?

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stationsOnFuels   StationsOnFuels[]
  stationsOptions   StationsOptions?  @relation(fields: [stationsOptionsId], references: [id])
  stationsOptionsId String            @unique

  stationMessages StationMessages[]
  stationEvents   StationEvent[]

  @@map("stations")
}

model StationMessages {
  id String @id @default(uuid())

  text      String
  createdAt DateTime @default(now())

  station   Station @relation(fields: [stationId], references: [id])
  stationId String

  viewed Boolean @default(false)

  @@map("stations_messages")
}

model StationsOptions {
  id String @id @default(uuid())

  station Station?

  shiftChangeEvents       Int @default(0)
  calibrationChangeEvents Int @default(0)
  seasonChangeEvents      Int @default(0)
  receiptCoefficient      Int @default(0)
  fixShiftCount    Int @default(0)
  seasonCount Int @default(1)

  @@map("stations_options")
}

model StationsOnFuels {
  id        String  @id @default(uuid())
  station   Station @relation(fields: [stationId], references: [id])
  stationId String
  fuel      Fuel    @relation(fields: [fuelId], references: [id])
  fuelId    String

  assignedAt DateTime @default(now())

  @@map("stations_on_fuels")
}

model StationCryptoKey {
  id        String @id @default(uuid())
  stationId String

  key       String?
  expiredAt DateTime?

  station Station[]

  createdAt DateTime @default(now())

  @@map("stations_crypto_keys")
}

model Contact {
  id String @id @default(uuid())

  isOwner Boolean @default(false)

  name        String
  description String?
  value       String?

  companiesAsOwner       Company[] @relation("OwnerContact")
  companiesAsResponsible Company[] @relation("ResponsibleContact")

  station Station[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contacts")
}

model ExchangeRates {
  id String @id @default(uuid())

  fromCurrencyType CurrencyType
  toCurrencyType   CurrencyType

  rate Float

  @@map("exchange_rates")
}

model PistolRates {
  id String @id @default(uuid())

  currencyType CurrencyType
  rate         Float

  @@map("pistol_rates")
}

model Fuel {
  id String @id @default(uuid())

  name          String
  fuelOnStation StationsOnFuels[]

  @@map("fuels")
}

model StationEvent {
  id        String    @id @default(uuid())
  type      EventType
  message   String
  station   Station   @relation(fields: [stationId], references: [id])
  stationId String
  viewed    Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("station_events")
}

enum EventType {
  LICENSE_EXPIRE_SOON_3DAYS
  LICENSE_EXPIRE_SOON_1DAY
  LICENSE_EXPIRED
  LICENSE_BLOCK_PARTIAL
  LICENSE_BLOCK_FULL
  SYNC_MISSING_1DAY
  SYNC_MISSING_2DAYS
  SYNC_MISSING_3DAYS
  PROCESSOR_OFFLINE
}
